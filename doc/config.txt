
Options in photon_ops.py ?????
RegisterPhotonOpType(identifier, Factory(), input_type=input_type)
(the registration is in a decorator)

----

input:
    *instance_catalog:

    *opsim_data:

    *telescope:

    *sky_model:

    *atm_psf:

    *tree_rings:

    *checkpoint:

    - skyCatalog

RegisterInputType('instance_catalog', InstCatalogLoader(InstCatalog, has_nobj=True))
RegisterValueType('InstCatWorldPos', InstCatWorldPos, [CelestialCoord],
                  input_type='instance_catalog')
RegisterObjectType('InstCatObj', InstCatObj, input_type='instance_catalog')
RegisterSEDType('InstCatSED', InstCatSEDBuilder(), input_type='instance_catalog')

RegisterInputType('opsim_data', InputLoader(OpsimDataLoader, file_scope=True, takes_logger=True))
RegisterValueType('OpsimData', OpsimData, [float, int, str], input_type='opsim_data')
RegisterBandpassType('OpsimBandpass', OpsimBandpass(), input_type='opsim_data')

RegisterInputType('telescope', TelescopeLoader(DetectorTelescope))

RegisterInputType('sky_model', SkyModelLoader(SkyModel))
RegisterValueType('SkyLevel', SkyLevel, [float], input_type='sky_model')

RegisterInputType('atm_psf', AtmLoader())
RegisterObjectType('AtmosphericPSF', BuildAtmosphericPSF, input_type='atm_psf')
RegisterObjectType('DoubleGaussianPSF', BuildDoubleGaussianPSF)
RegisterObjectType('KolmogorovPSF', BuildKolmogorovPSF)

RegisterInputType('tree_rings', InputLoader(TreeRings, takes_logger=True))
RegisterValueType('TreeRingCenter', TreeRingCenter, [galsim.PositionD], input_type='tree_rings')
RegisterValueType('TreeRingFunc', TreeRingFunc, [galsim.LookupTable], input_type='tree_rings')

RegisterInputType('checkpoint', InputLoader(Checkpointer, takes_logger=True))

RegisterInputType('sky_catalog',
                  SkyCatalogLoader(SkyCatalogInterface, has_nobj=True))
RegisterObjectType('SkyCatObj', SkyCatObj, input_type='sky_catalog')
RegisterValueType('SkyCatWorldPos', SkyCatWorldPos, [galsim.CelestialCoord],
                  input_type='sky_catalog')


image:
    type: LSST_Image

    bandpass: { type: OpsimBandpass }

    wcs:

    camera: "@output.camera"

    noise:

    sky_level: { type: SkyLevel }  # Computed from input.sky_model.

    apply_vignetting: True
    vignetting_data_file: LSSTCam_vignetting_data.json

    apply_sky_gradient: True

    use_flux_sky_areas: False

    sensor:

RegisterImageType('LSST_Flat', LSST_FlatBuilder())
RegisterImageType('LSST_Image', LSST_ImageBuilder())

RegisterWCSType('Batoid', BatoidWCSBuilder(), input_type="telescope")
RegisterWCSType('Dict', DictWCS())

psf:
    type: Convolve
    items:
        -
            type: AtmosphericPSF
        -
            type: Gaussian
            fwhm: 0.3

gal:
    type: InstCatObj

stamp:
    type: LSST_Silicon

    world_pos:
        type: InstCatWorldPos

    fft_photon_ops:

    photon_ops:


RegisterStampType('LSST_Silicon', LSST_SiliconBuilder())


output:
    type: LSST_CCD

    camera: LsstCam

    exptime: $exptime

    cosmic_ray_rate: 0.2

    det_num:

    dir: fits

    readout:

    truth:

RegisterOutputType('LSST_CCD', LSST_CCDBuilder())

RegisterExtraOutput('readout', CameraReadout())
RegisterExtraOutput('opd', OPDBuilder())
