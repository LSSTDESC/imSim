modules:
  - imsim

eval_variables:
  sband: g
  fexptime: 30.0
  scamera: "@output.camera"
  dcamera_info: {
    template: "$os.path.join(imsim.meta_data.data_dir, camera + '_info.yaml')"
  }
  arotTelPos: 0.0 deg
  fRubinHeight: 5.425 # height of TMA az/el axes intersection above azimuth ring
  fM1Height: 3.53 # height of M1 above azimuth ring when zenith pointing
  fCBPHeight: 12.135  # height of CBP az/el axes intersection above azimuth ring
  fRubinCBPRadialDist: 12.4  # radial distance from CBP origin to Rubin origin
  aRubinEl: $np.arctan2(CBPHeight-RubinHeight, RubinCBPRadialDist) * galsim.radians
  aCBPEl: $-RubinEl
  aRubinAz: 0.0 deg
  aCBPAz: $RubinAz + 180*galsim.degrees
  # The following perturb Rubin and CBP off of their nominal positions in which their
  # boresights are aligned with the opposing telescope's az/el axis intersection.
  # Note that the azimuth axis is parallel to zenith.  So equal motions in az and el
  # do not produce symmetric results in mutual alignment.
  aDeltaRubinAz: 15 deg
  aDeltaRubinEl: 0.0 deg
  aDeltaCBPAz: 15 deg
  aDeltaCBPEl: 0.0 deg
  # aDeltaRubinAz: 0.0 deg
  # aDeltaRubinEl: 12.5 deg
  # aDeltaCBPAz: 0.0 deg
  # aDeltaCBPEl: -12.5 deg

input:
  telescope:
    -
      file_name:
        type: FormattedStr
        format: $camera_info['telescope_format']
        items:
          - $band
      rotTelPos: $rotTelPos
      camera: $camera_info['camera_name']
      perturbations:
        -
          LSST:
            shift: $[0, 0, M1Height-RubinHeight]  # Move origin from M1 to Az/El intersection
            rotZ: $-RubinAz
            rot:
              axis: x
              angle: $90*galsim.degrees - RubinEl
              coordSys: global
        -  # Elevation adjustment
          LSST:
            rot:
              axis: x
              angle: $DeltaRubinEl
              coordSys: global  # Center of rotation is global origin
              frame: local  # Rotate parallel to local x axis
        -  # Azimuth adjustment
          LSST:
            rot:
              axis: z
              angle: $-DeltaRubinAz
              coordSys: global  # Center of rotation is global origin
              frame: global  # Rotate parallel to global z axis
    -
      file_name: CBP.yaml
      camera: "CBP"
      perturbations:
        -
          CBP:
            rotX: 180 deg
            shift: $[0, -RubinCBPRadialDist, -(CBPHeight-RubinHeight)]
            rotZ: 180 deg
        -
          CBP:
            rotX: $90*galsim.degrees + CBPEl
            rot:
              axis: z
              angle: $-CBPAz
              coordSys: global
              frame: global
        -  # Elevation adjustment
          CBP:
            rotX: $-DeltaCBPEl  # shortcut when frame and coordSys are both local
        -  # Azimuth adjustment
          CBP:
            rot:
              axis: z
              angle: $-DeltaCBPAz
              coordSys: local  # Center of rotation is local CBP origin
              frame: global  # Rotate parallel to global z axis

image:
  type: LSST_Image
  det_name: $det_name
  nobjects: 2
  wcs:
    type: cbp
    det_name: $det_name
  image_pos:
    - $700, 700
    - $3500, 3500
  # world_pos:
  #   - $18000, -10000
  #   - $16975, -8975
  bandpass:
    type: RubinBandpass
    band: $band

stamp:
  type: LSST_Silicon
  band: $band
  photon_ops:
    -
      type: CBPRubinOptics
      camera: $camera
    -
      type: FocusDepth
      depth:
        type: Eval
        str: depth_dict[band]
        ddepth_dict: {'u':0, 'g':0, 'r':0, 'i':0, 'z':0, 'y':-0.6}
    -
      type: Refraction
      index_ratio: 3.9

gal:
  type: TopHat
  radius: $150.0/2  # micron
  flux: 1.0e6
  sed: $galsim.sed.EmissionLine(wavelength=500.0).withFluxDensity(1.0, 500.0)

output:
  type: LSST_CCD
  nproc: 1    # Change this to work on multiple CCDs at once.
  nfiles: 1   # Default is all 189 CCDs.  Set to 1 while testing.
  camera: LsstCam
  exptime: $exptime
  cosmic_ray_rate: 0.2
  det_num:
    type: Sequence
    nitems: $camera_info['ndets']
  dir: fits
  file_name: $f"eimage_20240705-0-{band}-{det_name}-det{det_num}.fits"
